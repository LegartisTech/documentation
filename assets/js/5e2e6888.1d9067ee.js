"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[335],{3905:(o,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>y});var n=t(7294);function i(o,e,t){return e in o?Object.defineProperty(o,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):o[e]=t,o}function r(o,e){var t=Object.keys(o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(o);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),t.push.apply(t,n)}return t}function a(o){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(o,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(o,e,Object.getOwnPropertyDescriptor(t,e))}))}return o}function p(o,e){if(null==o)return{};var t,n,i=function(o,e){if(null==o)return{};var t,n,i={},r=Object.keys(o);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||(i[t]=o[t]);return i}(o,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(o);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(o,t)&&(i[t]=o[t])}return i}var c=n.createContext({}),s=function(o){var e=n.useContext(c),t=e;return o&&(t="function"==typeof o?o(e):a(a({},e),o)),t},l=function(o){var e=s(o.components);return n.createElement(c.Provider,{value:e},o.children)},d="mdxType",u={inlineCode:"code",wrapper:function(o){var e=o.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(o,e){var t=o.components,i=o.mdxType,r=o.originalType,c=o.parentName,l=p(o,["components","mdxType","originalType","parentName"]),d=s(t),m=i,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return t?n.createElement(y,a(a({ref:e},l),{},{components:t})):n.createElement(y,a({ref:e},l))}));function y(o,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof o||i){var r=t.length,a=new Array(r);a[0]=m;var p={};for(var c in e)hasOwnProperty.call(e,c)&&(p[c]=e[c]);p.originalType=o,p[d]="string"==typeof o?o:i,a[1]=p;for(var s=2;s<r;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},317:(o,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=t(7462),i=(t(7294),t(3905));const r={sidebar_position:4},a="Create data points",p={unversionedId:"api/prompts",id:"api/prompts",title:"Create data points",description:"Swagger API",source:"@site/docs/api/prompts.md",sourceDirName:"api",slug:"/api/prompts",permalink:"/documentation/docs/api/prompts",draft:!1,editUrl:"https://github.com/LegartisTech/documentation/tree/main/documentation/docs/api/prompts.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Create playbook",permalink:"/documentation/docs/api/playbooks"},next:{title:"Analyzing documents by api",permalink:"/documentation/docs/api/analyzing_documents"}},c={},s=[{value:"Create prompt",id:"create-prompt",level:2},{value:"Assign prompt to a playbook provision",id:"assign-prompt-to-a-playbook-provision",level:2}],l={toc:s},d="wrapper";function u(o){let{components:e,...t}=o;return(0,i.kt)(d,(0,n.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-data-points"},"Create data points"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://apidocs.legartis.ai/?urls.primaryName=v2%2Fontology#/prompts.automatedcheckpoint/create_acp_by_id_v2"},"Swagger API")),(0,i.kt)("p",null,"All provided examples in this guide are shown in python code. To get the code in other programming languages, follow the third party integration guide howto import openapi specifications in Postman."),(0,i.kt)("h2",{id:"create-prompt"},"Create prompt"),(0,i.kt)("p",null,"A prompt is a question or statement designed to extract specific information from a contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'plabyook_id = 123 # Define playbook as described in playbook section\n\n# Configure API client settings\nconfiguration = Configuration()\nconfiguration.host = os.environ["ONTOLOGY_SERVICE_HOST"]\nconfiguration.access_token = ... # see getting started section\n\nautomated_checkpoint_api = AutomatedcheckpointApi(ApiClient(configuration))\n\n# Define a UUID for a jurisdiction court boolean template\njurisdiction_court_boolean_template_id = "acc20b29-3a7d-43e2-ad89-aeb5eea5ec7a"  # uuid4()\n\n# Create an automated checkpoint by ID\njurisdiction_court_boolean_acp: AutomatedCheckpointReadData = automated_checkpoint_api.create_acp_by_id_v2(\n    body=AutomatedCheckpointCreateData(\n        friendly_id="company_jurisdiction_court_prompt",\n        provision_id="jurisdiction_courts",\n        normalization_type=NormalizationType.BOOLEAN,\n        templates=[\n            SingleAutomatedCheckpointCreateData(\n                id=jurisdiction_court_boolean_template_id,\n                name="Jurisdiction Court Prompt",\n                prompt="Is the court in Hamburg?",\n                language="de",\n                prompt_type="boolean",\n                released=True,\n                model=FLAN_MODEL_UUID,\n            )\n        ],\n    ),\n)\n\n# Print friendly id which is a combination of {company}_{passed friendly_id}\nprint(jurisdiction_court_boolean_acp.friendly_id)\n\n')),(0,i.kt)("h2",{id:"assign-prompt-to-a-playbook-provision"},"Assign prompt to a playbook provision"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://apidocs.legartis.ai/?urls.primaryName=v2%2Fontology#/provision.playbookprovision/update_full_playbook_provision_v2"},"Swagger API")),(0,i.kt)("p",null,"To evaluate a prompt, assign it to a playbook provision. A playbook provision is a subscription to a specific provision within a playbook, directly linking the prompt to the relevant section of the playbook."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'plabyook_id = 123 # Define playbook as described in playbook section\njurisdiction_court_boolean_friendly_id = "legartis_company_jurisdiction_court_prompt"\n\n# Configure API client settings\nconfiguration = Configuration()\nconfiguration.host = os.environ["ONTOLOGY_SERVICE_HOST"]\nconfiguration.access_token = ... # see getting started section\n\nplaybook_provision_api = PlaybookprovisionApi(ApiClient(configuration))\n\n# Update the playbook provision with the created playbook and automated checkpoint\nplaybook_provision = playbook_provision_api.update_full_playbook_provision_v2(\n    playbook_provision_id="5ee22753-4657-44dd-bc5d-e691dd13c888",\n    body=FullPlaybookProvisionUpdate(\n        playbook_provision=LegartisSdkOntologyServiceHttpHelperModelsPlaybookProvisionPlaybookProvisionUpdateData(\n            provision_id="jurisdiction_courts",\n            playbook_id=plabyook_id,  # see \'playbook section\'\n            enabled=True,\n            definition_type="internal",\n        ),\n        standard_texts=[],\n        prompts=[\n            FullPlaybookProvisionPromptConnectionUpdateData(\n                is_active=True,\n                friendly_id=jurisdiction_court_boolean_friendly_id,\n                rule=dict(\n                    data=OrRuleInput(\n                        terms=[\n                            LocationRule(country_id="DE", region_id="DE-HH", city_id="1276041799"),\n                        ]\n                    )\n                ),\n            )\n        ],\n        manual_requirement=None,\n    ),\n)\n\n# Print the updated playbook provision details\nprint(playbook_provision.playbook_provision.id)\n\n\n')))}u.isMDXComponent=!0}}]);