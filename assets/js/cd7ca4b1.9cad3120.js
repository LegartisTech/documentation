"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(f,r(r({ref:t},d),{},{components:n})):a.createElement(f,r({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},r="Analyzing documents by api",s={unversionedId:"api/analyzing-documents",id:"api/analyzing-documents",title:"Analyzing documents by api",description:"All provided examples in this guide are shown in python code. To get the code in other programming languages, follow the third party integration guide howto import openapi specifications in Postman.",source:"@site/docs/api/analyzing-documents.md",sourceDirName:"api",slug:"/api/analyzing-documents",permalink:"/docs/api/analyzing-documents",draft:!1,editUrl:"https://github.com/LegartisTech/documentation/tree/main/docs/api/analyzing-documents.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Api Specifications",permalink:"/docs/api/api-specifications"},next:{title:"Third party integrations",permalink:"/docs/api/third-party-integrations"}},l={},c=[{value:"Uploading a Document",id:"uploading-a-document",level:2},{value:"Receiving Document Data",id:"receiving-document-data",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"analyzing-documents-by-api"},"Analyzing documents by api"),(0,i.kt)("p",null,"All provided examples in this guide are shown in python code. To get the code in other programming languages, follow the third party integration guide howto import openapi specifications in Postman."),(0,i.kt)("h2",{id:"uploading-a-document"},"Uploading a Document"),(0,i.kt)("p",null,"To upload a document, select the v2/Document API and then select the POST ",(0,i.kt)("inlineCode",{parentName:"p"},"/v2/document/document/")," API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'base_url = "api.legartis.ai" \ncompany = "demo_company" \ndocument_id = uuid.uuid4() \npipeline_id = uuid.uuid4()\n          \ndata = {\n    "id": document_id, #UUID used later to pull the document\n    "playbook_id": 103, # provided to you during setup by legartis\n    "pipeline_id": pipeline_id, # UUID, automatically triggers the extraction/classification, not just the upload\n    "company_id": company,\n    "mime_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",\n    "title": "Test.docx", \n}\nfiles = {\'file\': open(\'nda.docx\', \'rb\')}\nheaders = {"Authorization": f"Bearer {access_token}"}\nresponse = requests.post(f"https://document.{base_url}/v2/document/document/", headers=headers, data=data, files=files)\nresponse_data: dict = response.json()\n')),(0,i.kt)("h2",{id:"receiving-document-data"},"Receiving Document Data"),(0,i.kt)("p",null,"To receive the extracted document data use the endpoint: /v2/workflow-pipeline/aggregated/{document_id}/"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'data = {"company" : "demo_company" }\nresponse = requests.get(f"https://workflow.{base_url}/v2/workflow-pipeline/task/aggregated/{document_id}/",params=data, headers=headers)\nresponse_data: dict = response.json()\n')),(0,i.kt)("p",null,"The JSON object that is being returned, has the following format:"),(0,i.kt)("p",null,"table"),(0,i.kt)("p",null,"The Payload includes the most relevant data points. The Legartis API returns two types of information:"),(0,i.kt)("p",null,"A) Information about Clauses (also called PTs, see PT Predictions)"),(0,i.kt)("p",null,"B) Information about Key Data Points (also called KDPs, see KDP Predictions)"),(0,i.kt)("p",null,"PT Predictions\nReturns a list of all the Clauses (PTs) that were predicted by the classifier, including:"),(0,i.kt)("p",null,'"provision_id": string id of the clause found.\n"segment_id": reference to the actual sentence.\n"classifier_id": which classifier version was used\n"confidence": Confidence of the classifier, that this sentence is this type of clause.\nKDP Predictions\nReturns a list of all the Key Data Points that were found in the sentences, including:'),(0,i.kt)("p",null,'"segment_id": reference to the actual sentence,'),(0,i.kt)("p",null,'"status": whether extraction was successful'),(0,i.kt)("p",null,'"definition_name": name of the Key Data Point,'),(0,i.kt)("p",null,'"definition_type": Type of the Key Data Point,'),(0,i.kt)("p",null,'the "data" property includes all relevant data points:'),(0,i.kt)("p",null,'"spans": List containing more precise parts of the text, that are relevant (optional).\n"class_type": We currently support location data, duration data, amount data and categorical data.\nLocation Data'),(0,i.kt)("p",null,'"type": If a location was found, this includes whether it is a city, region or country\n"city_id": unique identifier, which city was extracted,\n"region_id": unique identifier, which region was extracted,\n"country_id": unique identifier, which country was extracted,\n"place_id": additional unique identifier (optional)\nDuration Data'),(0,i.kt)("p",null,'"duration": a integer describing the duration (e.g. 1 in 1 month)\n"duration_unit": a string, describing the duration, can be "month", "year", "week", "day"\nAmount Data'),(0,i.kt)("p",null,'"amount": a integer describing the Amount\n"amount_unit": a string, describing the unit, e.g. "CHF", "EUR", "USD"'),(0,i.kt)("p",null,"List of Key Data Points\nThe number and type of Key Data Points we are extracting is ever changing and expanding. Please find below a list of a few. For a complete list please contact us."),(0,i.kt)("p",null,"Durations"),(0,i.kt)("p",null,"These Key Data Points include normalized durations consisting of a integer and a unit (year, month, week, day)."),(0,i.kt)("p",null,"duration_of_contract_all_durations: All durations that are mentioned in regards to the contract duration in normalized form (e.g. 3 months, 2 years)\nnotice_period_all_durations: All durations that are"))}p.isMDXComponent=!0}}]);