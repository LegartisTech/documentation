"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[781],{3905:(e,o,n)=>{n.d(o,{Zo:()=>s,kt:()=>d});var t=n(7294);function a(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function i(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?i(Object(n),!0).forEach((function(o){a(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function p(e,o){if(null==e)return{};var n,t,a=function(e,o){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||(a[n]=e[n]);return a}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),c=function(e){var o=t.useContext(l),n=o;return e&&(n="function"==typeof e?e(o):r(r({},o),e)),n},s=function(e){var o=c(e.components);return t.createElement(l.Provider,{value:o},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},b=t.forwardRef((function(e,o){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),b=a,d=u["".concat(l,".").concat(b)]||u[b]||y[b]||i;return n?t.createElement(d,r(r({ref:o},s),{},{components:n})):t.createElement(d,r({ref:o},s))}));function d(e,o){var n=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=b;var p={};for(var l in o)hasOwnProperty.call(o,l)&&(p[l]=o[l]);p.originalType=e,p[u]="string"==typeof e?e:a,r[1]=p;for(var c=2;c<i;c++)r[c]=n[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}b.displayName="MDXCreateElement"},6225:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>y,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},r="Create playbook",p={unversionedId:"api/playbooks_3",id:"api/playbooks_3",title:"Create playbook",description:"A playbook is a collection of provision subscriptions that you want to analyze in a document. Typically, Legartis sets up an initial playbook for you.",source:"@site/docs/api/playbooks_3.md",sourceDirName:"api",slug:"/api/playbooks_3",permalink:"/documentation/docs/api/playbooks_3",draft:!1,editUrl:"https://github.com/LegartisTech/documentation/tree/main/documentation/docs/api/playbooks_3.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Api Specifications",permalink:"/documentation/docs/api/api_specifications_2"},next:{title:"Create data points",permalink:"/documentation/docs/api/prompts_4"}},l={},c=[],s={toc:c},u="wrapper";function y(e){let{components:o,...n}=e;return(0,a.kt)(u,(0,t.Z)({},s,n,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-playbook"},"Create playbook"),(0,a.kt)("p",null,"A playbook is a collection of provision subscriptions that you want to analyze in a document. Typically, Legartis sets up an initial playbook for you."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom ontology_openapi_sdk import ApiClient, Configuration, PlaybookApi, PlaybookCreateData, PlaybookLanguageData\n\n# Configure API client settings\nconfiguration = Configuration()\nconfiguration.host = os.environ["ONTOLOGY_SERVICE_HOST"]\nconfiguration.access_token = ... # see getting started section\n\n# Load existing playbooks\nplaybook_api = PlaybookApi(ApiClient(configuration))\nfor playbook in playbook_api.list_playbooks_v2().items:\n    print(playbook.id, playbook.name)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nfrom ontology_openapi_sdk import ApiClient, Configuration, PlaybookApi, PlaybookCreateData, PlaybookLanguageData\n\n# Configure API client settings\nconfiguration = Configuration()\nconfiguration.host = os.environ["ONTOLOGY_SERVICE_HOST"]\nconfiguration.access_token = ... # see getting started section\n\n# Create a playbook with specified languages and company details\nplaybook_api = PlaybookApi(ApiClient(configuration))\nplabyook = playbook_api.create_playbook_v2(\n    body=PlaybookCreateData(\n        languages=[\n            PlaybookLanguageData(\n                name="API Playbook",\n                code="de",\n                enabled=True,\n            ),\n            PlaybookLanguageData(\n                name="API Playbook",\n                code="en",\n                enabled=True,\n            ),\n        ],\n        company_id="{your authorized company id}",\n        contract_type_id="nda_mutual",\n    )\n)\n\nprint(plabyook.id)\n\n# Or load existing playbooks\nfor playbook in playbook_api.list_playbooks_v2().items:\n    print(playbook.id, playbook.name)\n')))}y.isMDXComponent=!0}}]);